{"version":3,"sources":["components/GEA_children/AddCategory.tsx","classes/GifData.ts","giphy_sdk/request_sdk.ts","hooks/useGrid.ts","components/mini_components/LoadingComponent.tsx","components/GEA_children/GridView.tsx","components/GEA_children/ItemList.tsx","components/GiftExpertApp.tsx","index.tsx"],"names":["AddCategory","setAnime","useState","value","setValue","onSubmit","e","preventDefault","trim","length","anims","type","placeholder","onChange","target","GifData","id","title","url","images","image","this","original","gf","GiphyFetch","useFetchGrid","category","loading","setLoading","gifs","setGifs","useEffect","searchFor","search","lang","limit","then","arrayGitfs","data","_gifs","forEach","gif","push","fromObject","catch","err","console","log","LoadingComponent","indicatorEl","useLoading","indicator","className","GridView","map","src","alt","width","height","buildAnimeGrid","ItemList","GiftExpertApp","animes","name","index","key","renderRootUI","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28159a85.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\n//NOTE: When use a component you should use destructuring for cath the element from props\r\n//NOTE: When you use TypeScreipt you should receive the component like this:\r\n//NOTE: ( {variableName} : {variableName : type} )\r\n\r\n/**\r\n * \r\n * @target Show an input text and add a text to the list main\r\n * \r\n * @param setAnime is a function that allow to update the UI\r\n */\r\nconst AddCategory = ({ setAnime }: { setAnime: Function }) => {\r\n\r\n    //Value refers to the text input value\r\n    const [value, setValue] = useState('')\r\n\r\n\r\n    //Any because I know that element is a event from the input \r\n    const onChange = ({ target: { value } }: any) =>\r\n        setValue(value)\r\n\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n\r\n        if (value.trim().length > 0) {\r\n            setAnime((anims: any) => [value, ...anims])\r\n            setValue('')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Type your topic\"\r\n                    onChange={onChange}\r\n                    value={value}\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddCategory\r\n\r\n","\r\n/**\r\n * \r\n * @param images is an object that contains images from diffentes sizes\r\n * \r\n * @property image is the original photo url to show in grid\r\n * \r\n * @property url is where the gif is showned in Giphy (Storage)\r\n * \r\n */\r\nclass GifData {\r\n\r\n\r\n    readonly id: string\r\n    readonly title: string\r\n    readonly url: string\r\n    //This read like string\r\n    readonly image: string\r\n\r\n\r\n    constructor(id: string, title: string, url: string, images: any) {\r\n        this.id = id\r\n        this.title = title\r\n        this.url = url\r\n        //Read from the object \r\n        this.image = images?.original?.url ?? ''\r\n    }\r\n\r\n\r\n    static fromObject(gf: any): GifData {\r\n\r\n        const id = gf.id\r\n        const title = gf.title\r\n        const url = gf.url\r\n        const images = gf.images\r\n\r\n        return new GifData(id, title, url, images)\r\n    }\r\n\r\n\r\n    public toString(): string {\r\n        return `id: ${this.id}\\n` +\r\n            `title: ${this.title}\\n` +\r\n            `url: ${this.url}\\n` +\r\n            `image: ${this.image}\\n`\r\n    }\r\n\r\n}\r\n\r\nexport default GifData\r\n","import { GiphyFetch, } from '@giphy/js-fetch-api'\r\n\r\nconst gf = new GiphyFetch('9iZru4MOs4AwaDlo5C4RAWeGWr9Nrg9J')\r\n\r\n/**\r\n * \r\n * Get the trending gifs\r\n * \r\n * @remarks\r\n * This method is part of the giphy sdk\r\n *\r\n * @params This function don't need params to work\r\n * \r\n * @return Trending Gifs  Promise<GifsResult>\r\n * \r\n * ```javascript\r\n *   const fetchTrendingGifs: Promise<GifResult> = (offset: number) => gf.trending({ offset, limit: 10 })\r\n *\r\n * ```\r\n * \r\n * @release\r\n */\r\n\r\nconst fetchTrendingGifs = (offset: number = 25) => gf.trending({ limit: 10, offset: offset, rating: 'g' })\r\n\r\n/**\r\n * \r\n * @param searchFor Allow to search with that word\r\n * \r\n * @return Promise<GifsResult>\r\n * \r\n * @catch { data: gifs }\r\n * \r\n */\r\nconst fetchForValueGifs = (searchFor: string) => gf.search(searchFor, { lang: 'en', limit: 10 })\r\n\r\nexport {\r\n    fetchTrendingGifs,\r\n    fetchForValueGifs\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport GifData from \"../classes/GifData\";\r\nimport { fetchForValueGifs } from \"../giphy_sdk/request_sdk\";\r\n\r\n/**\r\n * \r\n * @description Allow to handle useState and useEffect\r\n * \r\n * @return loading and gifs [0,1]\r\n*/\r\n//Use whatever params you need\r\nexport default function useFetchGrid(category: string): [boolean, GifData[]] {\r\n\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [gifs, setGifs] = useState<GifData[]>([])\r\n\r\n    useEffect(() => {\r\n\r\n        fetchForValueGifs(category).then(({ data: arrayGitfs }) => {\r\n\r\n            let _gifs: GifData[] = []\r\n\r\n            arrayGitfs.forEach((gif) => {\r\n                if (gif)\r\n                    _gifs.push(GifData.fromObject(gif))\r\n            })\r\n\r\n            setGifs([..._gifs])\r\n            setLoading(false)\r\n        }).catch(err => {\r\n            //    setLoading(false)\r\n            console.log(`Error ${err}`)\r\n            setGifs([])\r\n            setLoading(false)\r\n        })\r\n        //Just run one time\r\n    }, ([category]))\r\n\r\n    //Return whatever you want\r\n    return [loading, gifs]\r\n}\r\n\r\n","import React from 'react'\r\nimport { useLoading, Oval } from '@agney/react-loading';\r\n\r\nexport const LoadingComponent = () => {\r\n\r\n    const { indicatorEl } = useLoading({\r\n        loading: true,\r\n        indicator: <Oval />,\r\n\r\n    });\r\n\r\n    return (\r\n        <div className=\"static-size\">\r\n            {indicatorEl} {/* renders only while loading */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport GifData from '../../classes/GifData'\r\n\r\n/**\r\n * \r\n * @param category Name of the gifs \r\n * @param gifs all gifs to use in the UI build\r\n * \r\n * @description Build the Grid component\r\n * \r\n */\r\nconst GridView = ({ category, gifs }: { category: string, gifs: GifData[] }) => {\r\n\r\n    \r\n    return (\r\n        <>\r\n            <h2>{category}</h2>\r\n            <br />\r\n            {buildAnimeGrid(gifs)}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction buildAnimeGrid(gifs: GifData[]): JSX.Element {\r\n\r\n    return (<div className=\"wrapper\">\r\n        {\r\n            gifs.map((gif) => {\r\n                return <div className=\"container-gif\">\r\n                    <img src={gif.image} alt={gif.title} width=\"90%\" height=\"70%\" />\r\n                    <br />\r\n                    <div className=\"tooltip\">{gif.title}\r\n                        <span className=\"tooltiptext\">{gif.id}</span>\r\n                    </div>\r\n                </div>\r\n            })\r\n        }\r\n    </div>)\r\n\r\n}\r\n\r\nexport default GridView\r\n","import React from 'react'\r\nimport useFetchGrid from '../../hooks/useGrid'\r\nimport { LoadingComponent } from '../mini_components/LoadingComponent'\r\nimport GridView from './GridView'\r\n\r\n\r\n//This file contains the item to show in the list ol\r\n//Each category is to search in the giphy sdk\r\nconst ItemList = ({ category }: { category: string }) => {\r\n\r\n    //Each time called creates a new instance from this method\r\n    const [loading, gifs] = useFetchGrid(category)\r\n\r\n    return (\r\n        <>\r\n            {loading ? <LoadingComponent /> : <GridView category={category} gifs={gifs} />}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default ItemList\r\n\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './GEA_children/AddCategory'\r\nimport ItemList from './GEA_children/ItemList'\r\n\r\n\r\n//The root\r\nconst GiftExpertApp = () => {\r\n\r\n    //Should be the same type in `setState`\r\n    const [animes, setAnime] = useState([])\r\n\r\n\r\n    return (\r\n        //Like a div with a column inside  \r\n        <>\r\n            <h1>Looking for your gifs</h1>\r\n\r\n            <AddCategory setAnime={setAnime} />\r\n            <hr />\r\n            {\r\n                renderRootUI(animes)\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nfunction renderRootUI(animes: string[]): JSX.Element {\r\n\r\n    if (animes.length === 0) return <h2>Please input some topic</h2>\r\n\r\n    return <ol>\r\n        {\r\n            animes.map((name, index) =>\r\n                //This should have a key to indetify\r\n                <ItemList key={name + index} category={name} />\r\n            )\r\n        }\r\n    </ol>\r\n\r\n}\r\n\r\n\r\nexport default GiftExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiftExpertApp from './components/GiftExpertApp';\n\nimport './css/index.css';\n\nReactDOM.render(\n  <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}